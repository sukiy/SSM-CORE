<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper用于映射dao的接口，namespace指定Dao接口的完整类名 -->
<mapper namespace="com.mybatis.dao.StudentDao">
    <!-- 映射dao接口中的每一个方法,id指定接口中的方法名
     insert,update,delete,select
     -->

    <!-- 映射添加方法,parameterType指定方法中的参数类型。
         参数类型的值可以引用mybatis核心配置文件中指定的别名，方便在这里引用，
         这样就不需要写完整的类名了。
         在SQL中使用#{}来引用实体中的属性名,mybatis就会将这些属性的值传入
         sql语句中执行
    -->
   <insert id="addStudent" parameterType="com.mybatis.entity.Student">
       insert into student(sname,sage,ssex) values(#{sname},#{sage},#{ssex})
   </insert>

    <!--根据Id查询指定student，返回一个Student对象
       parameterType:传入参数类型
       resultType:返回结果类型
       如果只传入一个普通类型的参数，引用时随便写一个名称
    -->
    <select id="getStudentById" parameterType="int" resultType="student">
      select * from student where sno=#{id}
    </select>

    <!--根据传入的Student对象执行修改操作-->
    <update id="updateStudent" parameterType="student">
        update student set sname=#{sname},sage=#{sage},ssex=#{ssex} where sno=#{sno}
    </update>


    <!--根据传入的Id执行删除操作-->
    <delete id="deleteStudent" parameterType="int">
        delete from student where sno=#{id}
    </delete>

    <!--查询所有的学生-->
    <select id="findStuList" resultType="student">
      select * from student
    </select>


    <!-- 插入数据时还可以使用主键策略，生成后的主键会自动赋值到当前操作的实体中 -->
    <!-- 1. 使用数据库自增长策略生成主键，适用于SQLServer、MySql等数据库。
    useGeneratedKeys="true"表示使用自动增长，keyProperty对应实体中的id属性
    <insert id="save" parameterType="student" useGeneratedKeys="true" keyProperty="sid">
        INSERT INTO STUDENTS(STU_NAME,STU_AGE) VALUES(#{stuName},#{stuAge})
    </insert>-->

    <!-- 2. 使用Sequence生成主键策略,适用于Oracle等数据库-->
    <!-- selectKey用于执行查询Sequence语句，得到自增长的值，
        order="BEFORE"表示在执行INSERT语句之前将序列的值设置到sid属性上-->
    <!--<insert id="save" parameterType="students">
        <selectKey keyProperty="sid" resultType="int" order="BEFORE">
            SELECT MY_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO STUDENTS(STU_ID,STU_NAME,STU_AGE) VALUES(#{stuName},#{stuAge})
    </insert>-->

    <!-- 3. 使用UUID主键生成策略，可以使用数据的uuid函数，也可以通过程序生成UUID
     例如：oracle中生成uuid的函数为：sys_guid()
          mysql中生成uuid的函数为：uuid()-->
    <!--<insert id="save" parameterType="students">
        <selectKey keyProperty="sid" resultType="String" order="BEFORE">
            SELECT UUID() FROM DUAL
        </selectKey>
        INSERT INTO STUDENTS(STU_NAME,STU_AGE) VALUES(#{stuName},#{stuAge})
    </insert>-->
</mapper>